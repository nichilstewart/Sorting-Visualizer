{"version":3,"sources":["logo.svg","SortingAlgorithms/utilities.js","SortingAlgorithms/quickSort.js","SortingAlgorithms/insertionSort.js","SortingAlgorithms/mergeSort.js","SortingAlgorithms/bubbleSort.js","SortingAlgorithms/heapSort.js","SortingAlgorithms/selectionSort.js","SortingAlgorithms/shellSort.js","SortingAlgorithms/shakerSort.js","SortingAlgorithms/baseText.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["swap","arr","index1","index2","temp","getQuickSortAnimations","copy","animations","quickSortHelper","length","left","right","part","i","j","pivot","push","partition","quickSortDescription","title","description","href","worstCase","averageCase","bestCase","space","insertionSortDescription","getMergeSortAnimations","len","mergeSortHelper","Array","aux","mid","Math","floor","k","merge","mergeSortDescription","getBubbleSortAnimations","array","bubbleSortHelper","bubbleSortDescription","array_length","getHeapSortAnimations","heapify","heapSort","max","heapSortDescription","selectionSortDescription","shellSortDescription","getShakerSortAnimations","swapped","generateShakerSortAnimations","shakerSortDescription","baseTextDescription","SORTED_COLOUR","desc","SortVisualizer","props","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","containerRef","useRef","ALGORITHM_DESC","initialiseArray","resetArrayColour","shuffle","animateArrayUpdate","forEach","index","comparison","setTimeout","prevArr","newValue","newArr","animateArrayAccess","arrayBars","current","children","arrayBarStyle","style","backgroundColor","animateSortedArray","DELAY","useEffect","className","onClick","getInsertionSortAnimations","minind","getSelectionSortAnimations","h","getShellSortAnimations","ref","map","barHeight","height","Container","Row","Col","xs","lg","color","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aed5266e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export function swap(arr, index1, index2) {\r\n    const temp = arr[index1];\r\n    arr[index1] = arr[index2];\r\n    arr[index2] = temp;\r\n  }","import { swap } from './utilities';\r\n\r\nexport function getQuickSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  quickSortHelper(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  if (right <= left) return;\r\n  const part = partition(arr, left, right, animations);\r\n  quickSortHelper(arr, left, part, animations);\r\n  quickSortHelper(arr, part + 1, right, animations);\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n  let i = left;\r\n  let j = right + 1;\r\n  const pivot = arr[left];\r\n  while (true) {\r\n    while (arr[++i] <= pivot) {\r\n      if (i === right) break;\r\n      animations.push([[i], false]);\r\n    }\r\n    while (arr[--j] >= pivot) {\r\n      if (j === left) break;\r\n      animations.push([[j], false]);\r\n    }\r\n    if (j <= i) break;\r\n    animations.push([[i, arr[j]], true]);\r\n    animations.push([[j, arr[i]], true]);\r\n    swap(arr, i, j);\r\n  }\r\n  animations.push([[left, arr[j]], true]);\r\n  animations.push([[j, arr[left]], true]);\r\n  swap(arr, left, j);\r\n  return j;\r\n}\r\n\r\nexport const quickSortDescription = {\r\n  title: 'Quick Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        \"Quicksort is a divide-and-conquer algorithm. It works by selecting a\r\n         'pivot' element from the array and partitioning the other elements \r\n         into two sub-arrays, according to whether they are less than or greater\r\n          than the pivot. The sub-arrays are then sorted recursively. This can \r\n          be done in-place, requiring small additional amounts of memory to \r\n          perform the sorting.\"\r\n        &nbsp;\r\n        <a href=\"https://en.wikipedia.org/wiki/Quicksort\">\r\n          Wikipedia Link.\r\n        </a>\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      Worst Time: O(<em>n</em><sup>2</sup>)\r\n    </span>\r\n  ),\r\n  averageCase: (\r\n    <span>\r\n      Average Time: O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      Best Time: O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: \r\n    <span>\r\n    Space Complexity: O(log <em>n</em>)\r\n    </span>\r\n};","import { swap } from \"./utilities\";\r\n\r\nexport function getInsertionSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  for (let i = 1; i < copy.length; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j, j + 1], false]);\r\n      if (copy[j + 1] < copy[j]) {\r\n        animations.push([[j, copy[j + 1]], true]);\r\n        animations.push([[j + 1, copy[j]], true]);\r\n        swap(copy, j, j + 1);\r\n      } else break;\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport const insertionSortDescription = {\r\n  title: 'Insertion Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        \"Insertion sort is a simple sorting algorithm that builds the final \r\n        sorted array (or list) one item at a time. Insertion sort iterates, \r\n        consuming one input element each repetition, and growing a sorted \r\n        output list. At each iteration, insertion sort removes one element \r\n        from the input data, finds the location it belongs within the sorted \r\n        list, and inserts it there. It repeats until no input elements remain.\" \r\n        &nbsp;\r\n        <a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">\r\n          Wikipedia Link.\r\n        </a>\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      Worst Time: O(<em>n</em><sup>2</sup>)\r\n    </span>\r\n  ),\r\n  averageCase: (\r\n    <span>\r\n      Average Time: O(<em>n</em><sup>2</sup>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      Best Time: O(<em>n</em>)\r\n    </span>\r\n  ),\r\n  space: \r\n    <span>\r\n    Space Complexity: O(1)\r\n    </span>\r\n};","export function getMergeSortAnimations(arr) {\r\n    const copy = [...arr];\r\n    const len = copy.length;\r\n    const aux = Array(len);\r\n    const animations = [];\r\n    mergeSortHelper(copy, aux, 0, len - 1, animations);\r\n    return animations;\r\n}\r\n  \r\nfunction mergeSortHelper(arr, aux, left, right, animations) {\r\n    if (right <= left) return;\r\n    const mid = left + Math.floor((right - left) / 2);\r\n    mergeSortHelper(arr, aux, left, mid, animations);\r\n    mergeSortHelper(arr, aux, mid + 1, right, animations);\r\n    merge(arr, aux, left, mid, right, animations);\r\n}\r\n  \r\nfunction merge(arr, aux, left, mid, right, animations) {\r\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\r\n    let i = left;\r\n    let j = mid + 1;\r\n    for (let k = left; k <= right; k++) {\r\n      if (i > mid) {\r\n        animations.push([[j], false]);\r\n        animations.push([[k, aux[j]], true]);\r\n        arr[k] = aux[j++];\r\n      } \r\n      else if (j > right) {\r\n        animations.push([[i], false]);\r\n        animations.push([[k, aux[i]], true]);\r\n        arr[k] = aux[i++];\r\n      } \r\n      else if (aux[j] < aux[i]) {\r\n        animations.push([[i, j], false]);\r\n        animations.push([[k, aux[j]], true]);\r\n        arr[k] = aux[j++];\r\n      } \r\n      else {\r\n        animations.push([[i, j], false]);\r\n        animations.push([[k, aux[i]], true]);\r\n        arr[k] = aux[i++];\r\n      }\r\n    }\r\n}\r\n\r\nexport const mergeSortDescription = {\r\n  title: 'Merge Sort',\r\n  description: (\r\n    <div>\r\n      <p>\r\n        \"Merge sort is an \r\n        efficient, general-purpose, comparison-based sorting algorithm. Most \r\n        implementations produce a stable sort, which means that the order of \r\n        equal elements is the same in the input and output. Merge sort is a \r\n        divide and conquer algorithm that was invented by John von Neumann in 1945.\"\r\n        &nbsp;\r\n        <a href=\"https://en.wikipedia.org/wiki/Merge_sort\">\r\n          Wikipedia Link.\r\n        </a>\r\n      </p>\r\n    </div>\r\n  ),\r\n  worstCase: (\r\n    <span>\r\n      Worst Time: O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  averageCase: (\r\n    <span>\r\n      Average Time: O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  bestCase: (\r\n    <span>\r\n      Best Time: O(<em>n</em> log <em>n</em>)\r\n    </span>\r\n  ),\r\n  space: \r\n    <span>\r\n    Space Complexity: O(<em>n</em>)\r\n    </span>\r\n};","import { swap } from \"./utilities\";\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    const copy = [...array];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations, copy);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations, copy) {\r\n    let len = copy.length;\r\n    for (let i = 0; i < len-2; i++) {\r\n        for (let j = 0; j < len-i-1; j++) {   \r\n\r\n            animations.push([[j, j+1], false]);\r\n\r\n            if (copy[j] > copy[j+1]) {\r\n                swap(copy, j, j+1);\r\n            }     \r\n            animations.push([[j, copy[j]], true]);\r\n            animations.push([[j+1, copy[j+1]], true]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const bubbleSortDescription = {\r\n    title: 'Bubble Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n          \"Bubble sort is a simple \r\n          sorting algorithm that repeatedly steps through the list, compares \r\n          adjacent elements and swaps them if they are in the wrong order. \r\n          The pass through the list is repeated until the list is sorted. \r\n          The algorithm, which is a comparison sort, is named for the way \r\n          smaller or larger elements \"bubble\" to the top of the list.\" \r\n          &nbsp;\r\n          <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">\r\n            Wikipedia Link.\r\n          </a>\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n        <span>\r\n          Worst Time: O(<em>n</em><sup>2</sup>)\r\n        </span>\r\n      ),\r\n    averageCase: (\r\n        <span>\r\n            Average Time: O(<em>n</em><sup>2</sup>)\r\n        </span>\r\n    ),\r\n    bestCase: (\r\n        <span>\r\n            Best Time: O(<em>n</em>)\r\n        </span>\r\n    ),\r\n    space: \r\n        <span>\r\n            Space Complexity: O(1)\r\n        </span>\r\n  };","import { swap } from \"./utilities\";\r\n\r\nlet array_length = 0;\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length < 1) return array;\r\n    heapSort(array, animations);\r\n    return animations;\r\n}\r\n  \r\nfunction heapify(arr, i, animations) {\r\n    let left = 2 * i + 1;\r\n    let right = 2 * i + 2;\r\n    let max = i;\r\n    if (left < array_length && arr[left] > arr[max]) {\r\n        animations.push([[left, max], false]);\r\n        animations.push([[left, max], false]);\r\n        max = left;\r\n    }\r\n    if (right < array_length && arr[right] > arr[max]) {\r\n        animations.push([[right, max], false]);\r\n        animations.push([[right, max], false]);\r\n        max = right;\r\n    }\r\n    if (max != i) {\r\n        animations.push([[i, arr[max]], true]);\r\n        animations.push([[max, arr[i]], true]);\r\n        swap(arr, i, max);\r\n        heapify(arr, max, animations);\r\n    }\r\n}\r\n  \r\nfunction heapSort(arr, animations) {\r\n    array_length = arr.length;\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i--) {\r\n        heapify(arr, i, animations);\r\n    }\r\n    for (i = arr.length - 1; i > 0; i--) {\r\n        //animations.push([[i, 0], false]);\r\n        animations.push([[0, i], false]);\r\n        animations.push([[0, arr[i]], true]);\r\n        animations.push([[i, arr[0]], true]);\r\n        swap(arr, 0, i);  \r\n        array_length--;\r\n        heapify(arr, 0, animations);\r\n    }\r\n}\r\n\r\nexport const heapSortDescription = {\r\n    title: 'Heap Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n          \"Heapsort is a comparison-based sorting algorithm. Similar to selection sort, \r\n          heapsort divides its input into a sorted and an unsorted region, \r\n          and it iteratively shrinks the unsorted region by extracting the \r\n          largest element from it and inserting it into the sorted region. \r\n          Unlike selection sort, heap sort maintains the unsorted \r\n          region in a heap data structure to more quickly find the largest \r\n          element in each step.\" \r\n          &nbsp;\r\n          <a href=\"https://en.wikipedia.org/wiki/Heapsort\">\r\n            Wikipedia Link.\r\n          </a>\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n      <span>\r\n        Worst Time: O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    averageCase: (\r\n      <span>\r\n        Average Time: O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    bestCase: (\r\n      <span>\r\n        Best Time: O(<em>n</em> log <em>n</em>)\r\n      </span>\r\n    ),\r\n    space: \r\n      <span>\r\n      Space Complexity: O(1)\r\n      </span>\r\n  };\r\n\r\n\r\n","import { swap } from \"./utilities\";\r\n\r\nexport function getSelectionSortAnimations(array){\r\n    const copy = [...array];\r\n\r\n    const animations=[];\r\n    for (let i=0;i<copy.length-1;i++) {\r\n        var minind=i;\r\n        for (let j=i+1;j<copy.length;j++) {\r\n            animations.push([[minind, j], false]);\r\n            if (copy[j]<copy[minind]) {\r\n                minind=j;\r\n            }\r\n        }\r\n        if (minind !== i) {\r\n            swap(copy, i, minind);\r\n            animations.push([[i, copy[i]], true]);\r\n            animations.push([[minind, copy[minind]], true]);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport const selectionSortDescription = {\r\n    title: 'Selection Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n         \"Selection sort is an in-place comparison sorting algorithm. The \r\n         algorithm divides the input list into a sorted sublist of items built\r\n         from left to right at the front of the list and a sublist of \r\n         the remaining unsorted items. The \r\n         algorithm functions by finding the smallest\r\n         element in the unsorted sublist, swapping it with the leftmost unsorted \r\n         element, and moving the sublist boundaries one element \r\n         to the right.\"\r\n          &nbsp;\r\n          <a href=\"https://en.wikipedia.org/wiki/Selection_sort\">\r\n            Wikipedia Link.\r\n          </a>\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n      <span>\r\n        Worst Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    averageCase: (\r\n      <span>\r\n        Average Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    bestCase: (\r\n      <span>\r\n        Best Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    space: \r\n      <span>\r\n      Space Complexity: O(1)\r\n      </span>\r\n  };","export function getShellSortAnimations(arr) {\r\n\r\n    const array = [...arr];\r\n    const animations = [];\r\n    var len = array.length;\r\n    var h = 1;\r\n    while (h < len / 2) {\r\n        h = 2 * h + 1;\r\n    }\r\n    while (h > 0) {\r\n        for (var i = h; i < len; i++) {\r\n            for (var j = i; j > 0 && array[j] < array[j - h]; j -= h) {                \r\n                animations.push([[j, j-h], false]);\r\n                animations.push([[j, array[j-h]], true]);\r\n                animations.push([[j-h, array[j]], true]);\r\n                array[j] = [array[j - h], (array[j - h] = array[j])][0];\r\n            }\r\n        }\r\n        h = Math.floor(h / 2);\r\n    }\r\n  return animations;\r\n}\r\n\r\n\r\nexport const shellSortDescription = {\r\n    title: 'Shell Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n          \"Shellsort is an in-place \r\n          comparison sort. \r\n          The method starts by sorting pairs of elements far apart from each other, \r\n          then progressively reducing the gap between elements to be compared. \r\n          By starting with far apart elements, it can move some out-of-place \r\n          elements into position faster than a simple nearest neighbor exchange.\" \r\n          &nbsp;\r\n          <a href=\"https://en.wikipedia.org/wiki/Shellsort\">\r\n            Wikipedia Link.\r\n          </a>\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n      <span>\r\n        Worst Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    averageCase: (\r\n      <span>\r\n        Average Time: O(<em>n</em> log<sup>2</sup> <em>n</em>)\r\n      </span> \r\n    ),\r\n    bestCase: (\r\n      <span>\r\n        Best Time: O(<em>n</em> log<sup>2</sup> <em>n</em>)\r\n      </span>\r\n    ),\r\n    space: \r\n      <span>\r\n      Space Complexity: O(1)\r\n      </span>\r\n  };","import { swap } from \"./utilities\";\r\n\r\nexport function getShakerSortAnimations(array) {\r\n    const arr = [...array];\r\n    let animations = [];\r\n    animations = generateShakerSortAnimations(arr, animations);\r\n    return animations;\r\n}\r\n  \r\nfunction generateShakerSortAnimations(arr, animations) {\r\n    var swapped;\r\n    do {\r\n        for (var i = 0; i < arr.length - 2; i++) {\r\n            if (arr[i] > arr[i + 1]) {\r\n                animations.push([[i, i+1], false]);\r\n                animations.push([[i, arr[i+1]], true]);\r\n                animations.push([[i, i+1], false]);\r\n                animations.push([[i+1, arr[i]], true]);\r\n                swap(arr, i, i+1);\r\n                swapped = true;\r\n            }\r\n        }\r\n        if (!swapped) {\r\n            break;\r\n        }\r\n        swapped = false;\r\n        for (i = arr.length - 2; i > 0; i--) {\r\n            if (arr[i] > arr[i + 1]) {\r\n                animations.push([[i, i+1], false]);\r\n                animations.push([[i, arr[i+1]], true]);\r\n                animations.push([[i, i+1], false]);\r\n                animations.push([[i+1, arr[i]], true]);\r\n                swap(arr, i, i+1);\r\n                swapped = true;\r\n            }\r\n        }\r\n    } while (swapped);\r\n    return animations;\r\n}\r\n\r\nexport const shakerSortDescription = {\r\n    title: 'Shaker Sort',\r\n    description: (\r\n      <div>\r\n        <p>\r\n            \"Shaker sort, also known as cocktail shaker sort, \r\n            is an extension of bubble sort. The algorithm extends bubble sort by \r\n            operating in two directions. While it improves on bubble sort by more \r\n            quickly moving items to the beginning of the list, it provides only \r\n            marginal performance improvements.\"\r\n          &nbsp;\r\n          <a href=\"https://en.wikipedia.org/wiki/Cocktail_shaker_sort\">\r\n            Wikipedia Link.\r\n          </a>\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n      <span>\r\n        Worst Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    averageCase: (\r\n      <span>\r\n        Average Time: O(<em>n</em><sup>2</sup>)\r\n      </span>\r\n    ),\r\n    bestCase: (\r\n      <span>\r\n        Best Time: O(<em>n</em>)\r\n      </span>\r\n    ),\r\n    space: \r\n      <span>\r\n      Space Complexity: O(1)\r\n      </span>\r\n  };","\r\nexport const baseTextDescription = {\r\n    title: 'Sorting Algorithm Visualizer',\r\n    description: (\r\n      <div>\r\n        <p>\r\n        Welcome to my sorting visualizer app developed using ReactJS! \r\n        Please select a sorting algorigthm from the list above to simulate \r\n        an animation for that algorithm. Below is various information about \r\n        the time and space complexities for the algorithm. Feel free to reach \r\n        out at any of the links below!\r\n        </p>\r\n      </div>\r\n    ),\r\n    worstCase: (\r\n        <span>\r\n        Worst Time Complexity\r\n        </span>\r\n    ),\r\n    averageCase: (\r\n        <span>\r\n        Average Time Complexity\r\n        </span>\r\n    ),\r\n    bestCase: (\r\n        <span>\r\n        Best Time Complexity\r\n        </span>\r\n    ),\r\n    space: <span>Worst Space Complexity</span>\r\n  };","import React, { useState, useEffect, useRef } from 'react';\r\nimport './SortingVisualizer.css';\r\nimport { swap } from \"../SortingAlgorithms/utilities\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n//get algorithm animation arrays\r\nimport { getQuickSortAnimations } from '../SortingAlgorithms/quickSort';\r\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/insertionSort';\r\nimport { getMergeSortAnimations } from '../SortingAlgorithms/mergeSort';\r\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/bubbleSort';\r\nimport { getHeapSortAnimations } from '../SortingAlgorithms/heapSort';\r\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/selectionSort';\r\nimport { getShellSortAnimations } from '../SortingAlgorithms/shellSort';\r\nimport { getShakerSortAnimations } from '../SortingAlgorithms/shakerSort';\r\n\r\n//get algorithm descriptions\r\nimport { baseTextDescription } from '../SortingAlgorithms/baseText';\r\nimport { bubbleSortDescription } from '../SortingAlgorithms/bubbleSort';\r\nimport { selectionSortDescription } from '../SortingAlgorithms/selectionSort';\r\nimport { insertionSortDescription } from '../SortingAlgorithms/insertionSort';\r\nimport { mergeSortDescription } from '../SortingAlgorithms/mergeSort';\r\nimport { quickSortDescription } from '../SortingAlgorithms/quickSort';\r\nimport { heapSortDescription } from '../SortingAlgorithms/heapSort';\r\nimport { shellSortDescription } from '../SortingAlgorithms/shellSort';\r\nimport { shakerSortDescription } from '../SortingAlgorithms/shakerSort';\r\n\r\n\r\n\r\nconst ARR_LEN = 100;\r\nconst MIN_NUM = 5;\r\nconst MAX_NUM = 400;\r\nconst DELAY = 5;\r\nconst ACCESSED_COLOUR = 'skyblue';\r\nconst SORTED_COLOUR = 'darkorange';\r\nlet desc = 'initial';\r\n\r\n\r\nexport default function SortVisualizer(props) {\r\n  const [arr, setArr] = useState([]);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  let ALGORITHM_DESC = {\r\n    'initial': baseTextDescription,\r\n    'bubbleSort': bubbleSortDescription,\r\n    'selectionSort': selectionSortDescription,\r\n    'insertionSort': insertionSortDescription,\r\n    'mergeSort': mergeSortDescription,\r\n    'quickSort': quickSortDescription,\r\n    'heapSort': heapSortDescription,\r\n    'shellSort': shellSortDescription,\r\n    'shakerSort': shakerSortDescription,\r\n  };\r\n\r\n  useEffect(initialiseArray, []);\r\n\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    const arr = [];\r\n    for (let i = 0; i < ARR_LEN; i++) {\r\n      arr.push((MAX_NUM - MIN_NUM) * (i / ARR_LEN) + MIN_NUM);\r\n    }\r\n    shuffle(arr);\r\n    setArr(arr);\r\n    desc = 'initial';\r\n  }\r\n\r\n  function mergeSort() {\r\n    desc = 'mergeSort';\r\n    const animations = getMergeSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function insertionSort() {\r\n    desc = 'insertionSort';\r\n    const animations = getInsertionSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function quickSort() {\r\n    desc = 'quickSort';\r\n    const animations = getQuickSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function bubbleSort() {\r\n    desc = 'bubbleSort';\r\n    const animations = getBubbleSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function heapSort() {\r\n    desc = 'heapSort';\r\n    const animations = getHeapSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function selectionSort() {\r\n    desc = 'selectionSort';\r\n    const animations = getSelectionSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function shellSort() {\r\n    desc = 'shellSort';\r\n    const animations = getShellSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function shakerSort() {\r\n    desc = 'shakerSort';\r\n    const animations = getShakerSortAnimations(arr);\r\n    animateArrayUpdate(animations);\r\n  }\r\n\r\n  function animateArrayUpdate(animations) {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      setTimeout(() => {\r\n        if (!swapped) {\r\n          if (comparison.length === 2) {\r\n            const [i, j] = comparison;\r\n            animateArrayAccess(i);\r\n            animateArrayAccess(j);\r\n          } else {\r\n            const [i] = comparison;\r\n            animateArrayAccess(i);\r\n          }\r\n        } else {\r\n          setArr((prevArr) => {\r\n            const [k, newValue] = comparison;\r\n            const newArr = [...prevArr];\r\n            newArr[k] = newValue;\r\n            return newArr;\r\n          });\r\n        }\r\n      }, index * DELAY);\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY);\r\n  }\r\n\r\n  function animateArrayAccess(index) {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = '';\r\n    }, DELAY * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(\r\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n        i * DELAY,\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n        <div className=\"header\">\r\n            Sorting Algorithm Visualizer &nbsp;\r\n            <button className=\"btn-alt btn-1\" onClick={initialiseArray}>Reset Array</button>\r\n            <button className=\"btn btn-1\" onClick={mergeSort}>Merge Sort</button>\r\n            <button className=\"btn btn-1\" onClick={quickSort}>Quick Sort</button>\r\n            <button className=\"btn btn-1\" onClick={heapSort}>Heap Sort</button>\r\n            <button className=\"btn btn-1\" onClick={insertionSort}>Insertion Sort</button>\r\n            <button className=\"btn btn-1\" onClick={selectionSort}>Selection Sort</button>\r\n            <button className=\"btn btn-1\" onClick={bubbleSort}>Bubble Sort</button>\r\n            <button className=\"btn btn-1\" onClick={shellSort}>Shell Sort</button>\r\n            <button className=\"btn btn-1\" onClick={shakerSort}>Shaker Sort</button>\r\n        </div> \r\n        <div className=\"array-container\" ref={containerRef}>\r\n            {arr.map((barHeight, index) => (\r\n                <div\r\n                    className=\"array-bar\"\r\n                    style={{\r\n                    height: `${barHeight}px`,\r\n                    }}\r\n                    key={index}\r\n                ></div>\r\n            ))}\r\n        </div>\r\n        <div className='text-description'>\r\n          <div className='child-div'>\r\n                <h2>{ALGORITHM_DESC[desc].title}</h2>\r\n                {ALGORITHM_DESC[desc].description}\r\n                <Container className ='time-box'>\r\n                  <Row>\r\n                    <Col>{ALGORITHM_DESC[desc].worstCase}</Col>\r\n                    <Col>{ALGORITHM_DESC[desc].averageCase}</Col>\r\n                    <Col>{ALGORITHM_DESC[desc].bestCase}</Col>\r\n                    <Col>{ALGORITHM_DESC[desc].space}</Col>\r\n                  </Row>\r\n                </Container>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className='footer'>\r\n          <Container>\r\n            <Row className=\"justify-content-md-center\">\r\n                  <Col xs lg=\"2\" style={{color: \"white\"}}>Nichil Stewart</Col>\r\n                  <Col xs lg=\"1\"><a href=\"https://github.com/nichilstewart\">GitHub</a></Col>\r\n                  <Col xs lg=\"1\"><a href=\"https://www.linkedin.com/in/nichil-stewart-33369397/\">LinkedIn</a></Col>\r\n                  <Col xs lg=\"1\"><a href=\"mailto:nichilst@usc.edu\">Email</a></Col>\r\n              </Row>\r\n          </Container>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    swap(arr, i, randomIndex);\r\n  }\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport SortVisualizer from './SortingVisualizer/SortingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}