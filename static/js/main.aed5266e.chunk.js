(this["webpackJsonpsorting-visualizer-complete"]=this["webpackJsonpsorting-visualizer-complete"]||[]).push([[0],{18:function(e,t,s){},19:function(e,t,s){},20:function(e,t,s){},21:function(e,t,s){"use strict";s.r(t);var i=s(0),n=s(1),r=s.n(n),c=s(12),a=s.n(c),o=(s(18),s.p,s(19),s(2)),l=s(4);s(20);function h(e,t,s){var i=e[t];e[t]=e[s],e[s]=i}s(11);var j=s(23),d=s(24),b=s(25);function p(e){var t=Object(o.a)(e),s=[];return u(t,0,t.length-1,s),s}function u(e,t,s,i){if(!(s<=t)){var n=function(e,t,s,i){var n=t,r=s+1,c=e[t];for(;;){for(;e[++n]<=c&&n!==s;)i.push([[n],!1]);for(;e[--r]>=c&&r!==t;)i.push([[r],!1]);if(r<=n)break;i.push([[n,e[r]],!0]),i.push([[r,e[n]],!0]),h(e,n,r)}return i.push([[t,e[r]],!0]),i.push([[r,e[t]],!0]),h(e,t,r),r}(e,t,s,i);u(e,t,n,i),u(e,n+1,s,i)}}var m={title:"Quick Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:["\"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.\" \xa0",Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Quicksort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsxs)("span",{children:["Space Complexity: O(log ",Object(i.jsx)("em",{children:"n"}),")"]})};var O={title:"Insertion Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Insertion_sort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})};function x(e){var t=Object(o.a)(e),s=t.length,i=[];return g(t,Array(s),0,s-1,i),i}function g(e,t,s,i,n){if(!(i<=s)){var r=s+Math.floor((i-s)/2);g(e,t,s,r,n),g(e,t,r+1,i,n),function(e,t,s,i,n,r){for(var c=s;c<=n;c++)t[c]=e[c];for(var a=s,o=i+1,l=s;l<=n;l++)a>i?(r.push([[o],!1]),r.push([[l,t[o]],!0]),e[l]=t[o++]):o>n?(r.push([[a],!1]),r.push([[l,t[a]],!0]),e[l]=t[a++]):t[o]<t[a]?(r.push([[a,o],!1]),r.push([[l,t[o]],!0]),e[l]=t[o++]):(r.push([[a,o],!1]),r.push([[l,t[a]],!0]),e[l]=t[a++])}(e,t,s,r,i,n)}}var f={title:"Merge Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Merge sort is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Merge_sort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsxs)("span",{children:["Space Complexity: O(",Object(i.jsx)("em",{children:"n"}),")"]})};function v(e){var t=[],s=Object(o.a)(e);return e.length<=1?e:(function(e,t,s){for(var i=s.length,n=0;n<i-2;n++)for(var r=0;r<i-n-1;r++)t.push([[r,r+1],!1]),s[r]>s[r+1]&&h(s,r,r+1),t.push([[r,s[r]],!0]),t.push([[r+1,s[r+1]],!0])}(0,t,s),t)}var k={title:"Bubble Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements "bubble" to the top of the list." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Bubble_sort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})},S=0;function C(e){var t=[];return e.length<1?e:(function(e,t){S=e.length;for(var s=Math.floor(S/2);s>=0;s--)w(e,s,t);for(s=e.length-1;s>0;s--)t.push([[0,s],!1]),t.push([[0,e[s]],!0]),t.push([[s,e[0]],!0]),h(e,0,s),S--,w(e,0,t)}(e,t),t)}function w(e,t,s){var i=2*t+1,n=2*t+2,r=t;i<S&&e[i]>e[r]&&(s.push([[i,r],!1]),s.push([[i,r],!1]),r=i),n<S&&e[n]>e[r]&&(s.push([[n,r],!1]),s.push([[n,r],!1]),r=n),r!=t&&(s.push([[t,e[r]],!0]),s.push([[r,e[t]],!0]),h(e,t,r),w(e,r,s))}var y={title:"Heap Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Heapsort is a comparison-based sorting algorithm. Similar to selection sort, heapsort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Heapsort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"})," log ",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})};var T={title:"Selection Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Selection sort is an in-place comparison sorting algorithm. The algorithm divides the input list into a sorted sublist of items built from left to right at the front of the list and a sublist of the remaining unsorted items. The algorithm functions by finding the smallest element in the unsorted sublist, swapping it with the leftmost unsorted element, and moving the sublist boundaries one element to the right." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Selection_sort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})};var N={title:"Shell Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Shellsort is an in-place comparison sort. The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared. By starting with far apart elements, it can move some out-of-place elements into position faster than a simple nearest neighbor exchange." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Shellsort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"})," log",Object(i.jsx)("sup",{children:"2"})," ",Object(i.jsx)("em",{children:"n"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"})," log",Object(i.jsx)("sup",{children:"2"})," ",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})};function W(e){var t=[];return t=function(e,t){var s;do{for(var i=0;i<e.length-2;i++)e[i]>e[i+1]&&(t.push([[i,i+1],!1]),t.push([[i,e[i+1]],!0]),t.push([[i,i+1],!1]),t.push([[i+1,e[i]],!0]),h(e,i,i+1),s=!0);if(!s)break;for(s=!1,i=e.length-2;i>0;i--)e[i]>e[i+1]&&(t.push([[i,i+1],!1]),t.push([[i,e[i+1]],!0]),t.push([[i,i+1],!1]),t.push([[i+1,e[i]],!0]),h(e,i,i+1),s=!0)}while(s);return t}(Object(o.a)(e),t)}var B={title:"Shaker Sort",description:Object(i.jsx)("div",{children:Object(i.jsxs)("p",{children:['"Shaker sort, also known as cocktail shaker sort, is an extension of bubble sort. The algorithm extends bubble sort by operating in two directions. While it improves on bubble sort by more quickly moving items to the beginning of the list, it provides only marginal performance improvements." \xa0',Object(i.jsx)("a",{href:"https://en.wikipedia.org/wiki/Cocktail_shaker_sort",children:"Wikipedia Link."})]})}),worstCase:Object(i.jsxs)("span",{children:["Worst Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),averageCase:Object(i.jsxs)("span",{children:["Average Time: O(",Object(i.jsx)("em",{children:"n"}),Object(i.jsx)("sup",{children:"2"}),")"]}),bestCase:Object(i.jsxs)("span",{children:["Best Time: O(",Object(i.jsx)("em",{children:"n"}),")"]}),space:Object(i.jsx)("span",{children:"Space Complexity: O(1)"})},A={title:"Sorting Algorithm Visualizer",description:Object(i.jsx)("div",{children:Object(i.jsx)("p",{children:"Welcome to my sorting visualizer app developed using ReactJS! Please select a sorting algorigthm from the list above to simulate an animation for that algorithm. Below is various information about the time and space complexities for the algorithm. Feel free to reach out at any of the links below!"})}),worstCase:Object(i.jsx)("span",{children:"Worst Time Complexity"}),averageCase:Object(i.jsx)("span",{children:"Average Time Complexity"}),bestCase:Object(i.jsx)("span",{children:"Best Time Complexity"}),space:Object(i.jsx)("span",{children:"Worst Space Complexity"})},M="darkorange",L="initial";function I(e){var t=Object(n.useState)([]),s=Object(l.a)(t,2),r=s[0],c=s[1],a=Object(n.useState)(!1),u=Object(l.a)(a,2),g=u[0],S=u[1],w=Object(n.useState)(!1),I=Object(l.a)(w,2),_=I[0],z=I[1],F=Object(n.useRef)(null),H={initial:A,bubbleSort:k,selectionSort:T,insertionSort:O,mergeSort:f,quickSort:m,heapSort:y,shellSort:N,shakerSort:B};function E(){if(!g){_&&P(),z(!1);for(var e=[],t=0;t<100;t++)e.push(t/100*395+5);q(e),c(e),L="initial"}}function J(e){g||(S(!0),e.forEach((function(e,t){var s=Object(l.a)(e,2),i=s[0],n=s[1];setTimeout((function(){if(n)c((function(e){var t=Object(l.a)(i,2),s=t[0],n=t[1],r=Object(o.a)(e);return r[s]=n,r}));else if(2===i.length){var e=Object(l.a)(i,2),t=e[0],s=e[1];Q(t),Q(s)}else{Q(Object(l.a)(i,1)[0])}}),5*t)})),setTimeout((function(){!function(){for(var e=F.current.children,t=function(t){var s=e[t].style;setTimeout((function(){return s.backgroundColor=M}),5*t)},s=0;s<e.length;s++)t(s);setTimeout((function(){z(!0),S(!1)}),5*e.length)}()}),5*e.length))}function Q(e){var t=F.current.children[e].style;setTimeout((function(){t.backgroundColor="skyblue"}),5),setTimeout((function(){t.backgroundColor=""}),10)}function P(){for(var e=F.current.children,t=0;t<r.length;t++){e[t].style.backgroundColor=""}}return Object(n.useEffect)(E,[]),Object(i.jsxs)("div",{className:"body",children:[Object(i.jsxs)("div",{className:"header",children:["Sorting Algorithm Visualizer \xa0",Object(i.jsx)("button",{className:"btn-alt btn-1",onClick:E,children:"Reset Array"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="mergeSort",J(x(r))},children:"Merge Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="quickSort",J(p(r))},children:"Quick Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="heapSort",J(C(r))},children:"Heap Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="insertionSort",J(function(e){for(var t=Object(o.a)(e),s=[],i=1;i<t.length;i++)for(var n=i-1;n>=0&&(s.push([[n,n+1],!1]),t[n+1]<t[n]);n--)s.push([[n,t[n+1]],!0]),s.push([[n+1,t[n]],!0]),h(t,n,n+1);return s}(r))},children:"Insertion Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="selectionSort",J(function(e){for(var t=Object(o.a)(e),s=[],i=0;i<t.length-1;i++){for(var n=i,r=i+1;r<t.length;r++)s.push([[n,r],!1]),t[r]<t[n]&&(n=r);n!==i&&(h(t,i,n),s.push([[i,t[i]],!0]),s.push([[n,t[n]],!0]))}return s}(r))},children:"Selection Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="bubbleSort",J(v(r))},children:"Bubble Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="shellSort",J(function(e){for(var t=Object(o.a)(e),s=[],i=t.length,n=1;n<i/2;)n=2*n+1;for(;n>0;){for(var r=n;r<i;r++)for(var c=r;c>0&&t[c]<t[c-n];c-=n)s.push([[c,c-n],!1]),s.push([[c,t[c-n]],!0]),s.push([[c-n,t[c]],!0]),t[c]=[t[c-n],t[c-n]=t[c]][0];n=Math.floor(n/2)}return s}(r))},children:"Shell Sort"}),Object(i.jsx)("button",{className:"btn btn-1",onClick:function(){L="shakerSort",J(W(r))},children:"Shaker Sort"})]}),Object(i.jsx)("div",{className:"array-container",ref:F,children:r.map((function(e,t){return Object(i.jsx)("div",{className:"array-bar",style:{height:"".concat(e,"px")}},t)}))}),Object(i.jsx)("div",{className:"text-description",children:Object(i.jsxs)("div",{className:"child-div",children:[Object(i.jsx)("h2",{children:H[L].title}),H[L].description,Object(i.jsx)(j.a,{className:"time-box",children:Object(i.jsxs)(d.a,{children:[Object(i.jsx)(b.a,{children:H[L].worstCase}),Object(i.jsx)(b.a,{children:H[L].averageCase}),Object(i.jsx)(b.a,{children:H[L].bestCase}),Object(i.jsx)(b.a,{children:H[L].space})]})})]})}),Object(i.jsx)("div",{className:"footer",children:Object(i.jsx)(j.a,{children:Object(i.jsxs)(d.a,{className:"justify-content-md-center",children:[Object(i.jsx)(b.a,{xs:!0,lg:"2",style:{color:"white"},children:"Nichil Stewart"}),Object(i.jsx)(b.a,{xs:!0,lg:"1",children:Object(i.jsx)("a",{href:"https://github.com/nichilstewart",children:"GitHub"})}),Object(i.jsx)(b.a,{xs:!0,lg:"1",children:Object(i.jsx)("a",{href:"https://www.linkedin.com/in/nichil-stewart-33369397/",children:"LinkedIn"})}),Object(i.jsx)(b.a,{xs:!0,lg:"1",children:Object(i.jsx)("a",{href:"mailto:nichilst@usc.edu",children:"Email"})})]})})})]})}var q=function(e){for(var t=e.length-1;t>=0;t--){h(e,t,Math.floor(Math.random()*(t+1)))}};var _=function(){return Object(i.jsx)("div",{className:"App",children:Object(i.jsx)(I,{})})},z=function(e){e&&e instanceof Function&&s.e(3).then(s.bind(null,26)).then((function(t){var s=t.getCLS,i=t.getFID,n=t.getFCP,r=t.getLCP,c=t.getTTFB;s(e),i(e),n(e),r(e),c(e)}))};a.a.render(Object(i.jsx)(r.a.StrictMode,{children:Object(i.jsx)(_,{})}),document.getElementById("root")),z()}},[[21,1,2]]]);
//# sourceMappingURL=main.aed5266e.chunk.js.map